gzochi-metad, the gzochi meta server, is an experimental component that makes it
possible to scale a gzochi game application horizontally across a cluster of
gzochid containers, while providing the same guarantees around data consistency
and transactional atomicity offered by a configuration with a single gzochid
instance.

From a data perspective, this "high availability" configuration works by having
the meta server act as the authoritative store for game application data,
allowing individual gzochid server instances to obtain temporary locks on groups
of keys (and key ranges) for the purpose of transactional task processing. While
these locks are held, data modified by game transactions is periodically
transmitted back to the meta server for durable persistence. After a
configurable interval, a server instance "voluntarily" releases a lock,
purging its local cache of related data, and another server instance is free to
seize that lock.

The meta server is also currently capable of delivering session and channel
messages to clients connected to remote gzochid server instances, without the
application code that sends the message having to know the topology of the
cluster or the distribution of client connections.

In the future, the meta server will also be responsible for balancing client
connections and coordinating task execution across gzochid server instances. At
the moment, tasks run only on the gzochid server from which they were originally
scheduled, and while tasks themselves are durable, they are not properly
rescheduled upon container restart when running in distributed mode the way
they are in a single-node configuration.

More meta server functionality (and documentation!) is coming soon. In the
meantime, Please send any questions (and any bugs) to gzochi-devel@nongnu.org.
