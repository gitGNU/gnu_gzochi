#
# The gzochi server configuration file.
#

# Configuration for the "admin" context, which includes the debugging server
# and the web monitoring console.

[admin]

# Whether to enable the administrative context. Setting this option to "false"
# disables lower-level administrative modules, such as the debugging server and
# the monitoring console.

context.enabled = true

# Configuration for the debugging server. Note that debugging is performed over
# telnet with NO AUTHENTICATION, and any client of the debugging server can
# execute arbitrary Guile Scheme within the server process and can thus 
# effectively impersonate the user running the server. For this reason, USE 
# CAUTION when enabling the debugging server, and always configure it to listen
# on a port that is not widely accessible.

module.debug.enabled = true
module.debug.port = 37146

# Configuration for the web monitoring console.

module.httpd.enabled = true
module.httpd.port = 8000

# Configuration for the "game" context, the server container for gzochi game
# applications. 

[game]

# The port to listen on for incoming client connections to game application
# endpoints.

server.port = 8001

# The root locations for various game application-related files. See the manual
# for more information. The path given by server.fs.apps may be absolute or
# relative; if relative, it is resolved relative to the location of this
# configuration file.

server.fs.data = @localstatedir@/gzochid/data
server.fs.apps = @datarootdir@/gzochid/deploy

# The directory to probe for application authentication plugins. Every regular 
# file in this directory will be examined, and an attempt will be made to load
# each as a dynamic library and initialize the authentication plugin interface.

auth.plugin.dir = @libdir@/gzochid/auth

# The parent directory for storage engine libraries. This path is used to 
# resolve the absolute location of the storage engine specified by 
# 'storage.engine' (see below).

storage.engine.dir = @libdir@/gzochid/storage

# The name of the storage engine to use to store game application data. Must be
# bdb (for Berkeley DB) or mem (for gzochid's built-in B*tree-based storage
# engine respectively). Support for storage engines (besides 'mem') depends on
# the requisite module (and associated third-party database libraries) being 
# installed.
# 
# If this setting is omitted, the server will fall back to using the 'mem' 
# storage engine, which means that game application data will not be persisted 
# to disk. Note that this is not a safe configuration for a server in a 
# production context!

storage.engine = bdb

# The default maximum duration (in milliseconds) for time-limited transactions,
# which include any post-initialization application tasks and callbacks. Among
# other things, this setting has an impact on the task execution throughput of
# applications. Before increasing it, consider refactoring your tasks to access
# less data.

tx.timeout = 30

# Configuration for the connection to the gzochi meta server, which supports
# distributed, high-availability deployments of game applications.

[metaserver]

# Whether to enable the meta server client. Setting this option to "true" will
# override the local storage engine configuration (see above) in favor of the
# data client cache storage mechanism.

client.enabled = false

# The address of the meta server, in "host:port" form. Default to
# "localhost:9001" if unspecified.

server.address = localhost:9001

# The interval (in secconds) between attempts to connect to the meta server.

server.connect.interval.sec = 5

# The amount of time that a lock on a single key in an application's data store
# can be held before the client will voluntarily release it back to the meta
# server. Lowering this value will decrease latency for application nodes
# contending for a lock but may also decrease task execution throughput.

lock.release.msec = 1000

# The amount of time that a lock on a range of keys in an application's data
# store can be held before the client will voluntarily release it back to the
# meta server. This value should usually be lower than the value for
# `lock.release.msec' since range locks block a wider range of access to the
# store.

rangelock.release.msec = 500

# System-wide logging configuration.

[log]

# The lowest severity of log messages that will be recorded. Valid values are
# ERR, WARNING, NOTICE, INFO, and DEBUG. 

priority.threshold = INFO
